#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PokeTracker.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PokemonTracker")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPT_Type(PT_Type instance);
    partial void UpdatePT_Type(PT_Type instance);
    partial void DeletePT_Type(PT_Type instance);
    partial void InsertPT_PokemonHasAttack(PT_PokemonHasAttack instance);
    partial void UpdatePT_PokemonHasAttack(PT_PokemonHasAttack instance);
    partial void DeletePT_PokemonHasAttack(PT_PokemonHasAttack instance);
    partial void InsertPT_PokemonHasType(PT_PokemonHasType instance);
    partial void UpdatePT_PokemonHasType(PT_PokemonHasType instance);
    partial void DeletePT_PokemonHasType(PT_PokemonHasType instance);
    partial void InsertPT_GymHasPokemon(PT_GymHasPokemon instance);
    partial void UpdatePT_GymHasPokemon(PT_GymHasPokemon instance);
    partial void DeletePT_GymHasPokemon(PT_GymHasPokemon instance);
    partial void InsertPT_UserHasCandy(PT_UserHasCandy instance);
    partial void UpdatePT_UserHasCandy(PT_UserHasCandy instance);
    partial void DeletePT_UserHasCandy(PT_UserHasCandy instance);
    partial void InsertPT_UserHasPokemon(PT_UserHasPokemon instance);
    partial void UpdatePT_UserHasPokemon(PT_UserHasPokemon instance);
    partial void DeletePT_UserHasPokemon(PT_UserHasPokemon instance);
    partial void InsertPT_UserPokemonHasAttack(PT_UserPokemonHasAttack instance);
    partial void UpdatePT_UserPokemonHasAttack(PT_UserPokemonHasAttack instance);
    partial void DeletePT_UserPokemonHasAttack(PT_UserPokemonHasAttack instance);
    partial void InsertPT_UserFavoriteGym(PT_UserFavoriteGym instance);
    partial void UpdatePT_UserFavoriteGym(PT_UserFavoriteGym instance);
    partial void DeletePT_UserFavoriteGym(PT_UserFavoriteGym instance);
    partial void InsertPT_Pokemon(PT_Pokemon instance);
    partial void UpdatePT_Pokemon(PT_Pokemon instance);
    partial void DeletePT_Pokemon(PT_Pokemon instance);
    partial void InsertPT_Attack(PT_Attack instance);
    partial void UpdatePT_Attack(PT_Attack instance);
    partial void DeletePT_Attack(PT_Attack instance);
    partial void InsertPT_Gym(PT_Gym instance);
    partial void UpdatePT_Gym(PT_Gym instance);
    partial void DeletePT_Gym(PT_Gym instance);
    partial void InsertPT_Team(PT_Team instance);
    partial void UpdatePT_Team(PT_Team instance);
    partial void DeletePT_Team(PT_Team instance);
    partial void InsertPT_User(PT_User instance);
    partial void UpdatePT_User(PT_User instance);
    partial void DeletePT_User(PT_User instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["PokemonTrackerConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<PT_Type> PT_Types
		{
			get
			{
				return this.GetTable<PT_Type>();
			}
		}
		
		public System.Data.Linq.Table<PT_PokemonHasAttack> PT_PokemonHasAttacks
		{
			get
			{
				return this.GetTable<PT_PokemonHasAttack>();
			}
		}
		
		public System.Data.Linq.Table<PT_PokemonHasType> PT_PokemonHasTypes
		{
			get
			{
				return this.GetTable<PT_PokemonHasType>();
			}
		}
		
		public System.Data.Linq.Table<PT_GymHasPokemon> PT_GymHasPokemons
		{
			get
			{
				return this.GetTable<PT_GymHasPokemon>();
			}
		}
		
		public System.Data.Linq.Table<PT_UserHasCandy> PT_UserHasCandies
		{
			get
			{
				return this.GetTable<PT_UserHasCandy>();
			}
		}
		
		public System.Data.Linq.Table<PT_UserHasPokemon> PT_UserHasPokemons
		{
			get
			{
				return this.GetTable<PT_UserHasPokemon>();
			}
		}
		
		public System.Data.Linq.Table<PT_UserPokemonHasAttack> PT_UserPokemonHasAttacks
		{
			get
			{
				return this.GetTable<PT_UserPokemonHasAttack>();
			}
		}
		
		public System.Data.Linq.Table<PT_UserFavoriteGym> PT_UserFavoriteGyms
		{
			get
			{
				return this.GetTable<PT_UserFavoriteGym>();
			}
		}
		
		public System.Data.Linq.Table<PT_Pokemon> PT_Pokemons
		{
			get
			{
				return this.GetTable<PT_Pokemon>();
			}
		}
		
		public System.Data.Linq.Table<PT_Attack> PT_Attacks
		{
			get
			{
				return this.GetTable<PT_Attack>();
			}
		}
		
		public System.Data.Linq.Table<PT_Gym> PT_Gyms
		{
			get
			{
				return this.GetTable<PT_Gym>();
			}
		}
		
		public System.Data.Linq.Table<PT_Team> PT_Teams
		{
			get
			{
				return this.GetTable<PT_Team>();
			}
		}
		
		public System.Data.Linq.Table<PT_User> PT_Users
		{
			get
			{
				return this.GetTable<PT_User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PT_Type")]
	public partial class PT_Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Type;
		
		private EntitySet<PT_PokemonHasType> _PT_PokemonHasTypes;
		
		private EntitySet<PT_Attack> _PT_Attacks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public PT_Type()
		{
			this._PT_PokemonHasTypes = new EntitySet<PT_PokemonHasType>(new Action<PT_PokemonHasType>(this.attach_PT_PokemonHasTypes), new Action<PT_PokemonHasType>(this.detach_PT_PokemonHasTypes));
			this._PT_Attacks = new EntitySet<PT_Attack>(new Action<PT_Attack>(this.attach_PT_Attacks), new Action<PT_Attack>(this.detach_PT_Attacks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PT_Type_PT_PokemonHasType", Storage="_PT_PokemonHasTypes", ThisKey="ID", OtherKey="TypeID")]
		public EntitySet<PT_PokemonHasType> PT_PokemonHasTypes
		{
			get
			{
				return this._PT_PokemonHasTypes;
			}
			set
			{
				this._PT_PokemonHasTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PT_Type_PT_Attack", Storage="_PT_Attacks", ThisKey="ID", OtherKey="TypeID")]
		public EntitySet<PT_Attack> PT_Attacks
		{
			get
			{
				return this._PT_Attacks;
			}
			set
			{
				this._PT_Attacks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PT_PokemonHasTypes(PT_PokemonHasType entity)
		{
			this.SendPropertyChanging();
			entity.PT_Type = this;
		}
		
		private void detach_PT_PokemonHasTypes(PT_PokemonHasType entity)
		{
			this.SendPropertyChanging();
			entity.PT_Type = null;
		}
		
		private void attach_PT_Attacks(PT_Attack entity)
		{
			this.SendPropertyChanging();
			entity.PT_Type = this;
		}
		
		private void detach_PT_Attacks(PT_Attack entity)
		{
			this.SendPropertyChanging();
			entity.PT_Type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PT_PokemonHasAttack")]
	public partial class PT_PokemonHasAttack : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PokemonID;
		
		private int _AttackID;
		
		private EntityRef<PT_Pokemon> _PT_Pokemon;
		
		private EntityRef<PT_Attack> _PT_Attack;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPokemonIDChanging(int value);
    partial void OnPokemonIDChanged();
    partial void OnAttackIDChanging(int value);
    partial void OnAttackIDChanged();
    #endregion
		
		public PT_PokemonHasAttack()
		{
			this._PT_Pokemon = default(EntityRef<PT_Pokemon>);
			this._PT_Attack = default(EntityRef<PT_Attack>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PokemonID", DbType="Int NOT NULL")]
		public int PokemonID
		{
			get
			{
				return this._PokemonID;
			}
			set
			{
				if ((this._PokemonID != value))
				{
					if (this._PT_Pokemon.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPokemonIDChanging(value);
					this.SendPropertyChanging();
					this._PokemonID = value;
					this.SendPropertyChanged("PokemonID");
					this.OnPokemonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttackID", DbType="Int NOT NULL")]
		public int AttackID
		{
			get
			{
				return this._AttackID;
			}
			set
			{
				if ((this._AttackID != value))
				{
					if (this._PT_Attack.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttackIDChanging(value);
					this.SendPropertyChanging();
					this._AttackID = value;
					this.SendPropertyChanged("AttackID");
					this.OnAttackIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PT_Pokemon_PT_PokemonHasAttack", Storage="_PT_Pokemon", ThisKey="PokemonID", OtherKey="ID", IsForeignKey=true)]
		public PT_Pokemon PT_Pokemon
		{
			get
			{
				return this._PT_Pokemon.Entity;
			}
			set
			{
				PT_Pokemon previousValue = this._PT_Pokemon.Entity;
				if (((previousValue != value) 
							|| (this._PT_Pokemon.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PT_Pokemon.Entity = null;
						previousValue.PT_PokemonHasAttacks.Remove(this);
					}
					this._PT_Pokemon.Entity = value;
					if ((value != null))
					{
						value.PT_PokemonHasAttacks.Add(this);
						this._PokemonID = value.ID;
					}
					else
					{
						this._PokemonID = default(int);
					}
					this.SendPropertyChanged("PT_Pokemon");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PT_Attack_PT_PokemonHasAttack", Storage="_PT_Attack", ThisKey="AttackID", OtherKey="ID", IsForeignKey=true)]
		public PT_Attack PT_Attack
		{
			get
			{
				return this._PT_Attack.Entity;
			}
			set
			{
				PT_Attack previousValue = this._PT_Attack.Entity;
				if (((previousValue != value) 
							|| (this._PT_Attack.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PT_Attack.Entity = null;
						previousValue.PT_PokemonHasAttacks.Remove(this);
					}
					this._PT_Attack.Entity = value;
					if ((value != null))
					{
						value.PT_PokemonHasAttacks.Add(this);
						this._AttackID = value.ID;
					}
					else
					{
						this._AttackID = default(int);
					}
					this.SendPropertyChanged("PT_Attack");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PT_PokemonHasType")]
	public partial class PT_PokemonHasType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PokemonID;
		
		private int _TypeID;
		
		private EntityRef<PT_Type> _PT_Type;
		
		private EntityRef<PT_Pokemon> _PT_Pokemon;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPokemonIDChanging(int value);
    partial void OnPokemonIDChanged();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    #endregion
		
		public PT_PokemonHasType()
		{
			this._PT_Type = default(EntityRef<PT_Type>);
			this._PT_Pokemon = default(EntityRef<PT_Pokemon>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PokemonID", DbType="Int NOT NULL")]
		public int PokemonID
		{
			get
			{
				return this._PokemonID;
			}
			set
			{
				if ((this._PokemonID != value))
				{
					if (this._PT_Pokemon.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPokemonIDChanging(value);
					this.SendPropertyChanging();
					this._PokemonID = value;
					this.SendPropertyChanged("PokemonID");
					this.OnPokemonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int NOT NULL")]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._PT_Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PT_Type_PT_PokemonHasType", Storage="_PT_Type", ThisKey="TypeID", OtherKey="ID", IsForeignKey=true)]
		public PT_Type PT_Type
		{
			get
			{
				return this._PT_Type.Entity;
			}
			set
			{
				PT_Type previousValue = this._PT_Type.Entity;
				if (((previousValue != value) 
							|| (this._PT_Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PT_Type.Entity = null;
						previousValue.PT_PokemonHasTypes.Remove(this);
					}
					this._PT_Type.Entity = value;
					if ((value != null))
					{
						value.PT_PokemonHasTypes.Add(this);
						this._TypeID = value.ID;
					}
					else
					{
						this._TypeID = default(int);
					}
					this.SendPropertyChanged("PT_Type");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PT_Pokemon_PT_PokemonHasType", Storage="_PT_Pokemon", ThisKey="PokemonID", OtherKey="ID", IsForeignKey=true)]
		public PT_Pokemon PT_Pokemon
		{
			get
			{
				return this._PT_Pokemon.Entity;
			}
			set
			{
				PT_Pokemon previousValue = this._PT_Pokemon.Entity;
				if (((previousValue != value) 
							|| (this._PT_Pokemon.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PT_Pokemon.Entity = null;
						previousValue.PT_PokemonHasTypes.Remove(this);
					}
					this._PT_Pokemon.Entity = value;
					if ((value != null))
					{
						value.PT_PokemonHasTypes.Add(this);
						this._PokemonID = value.ID;
					}
					else
					{
						this._PokemonID = default(int);
					}
					this.SendPropertyChanged("PT_Pokemon");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PT_GymHasPokemon")]
	public partial class PT_GymHasPokemon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PokemonID;
		
		private int _GymID;
		
		private EntityRef<PT_Pokemon> _PT_Pokemon;
		
		private EntityRef<PT_Gym> _PT_Gym;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPokemonIDChanging(int value);
    partial void OnPokemonIDChanged();
    partial void OnGymIDChanging(int value);
    partial void OnGymIDChanged();
    #endregion
		
		public PT_GymHasPokemon()
		{
			this._PT_Pokemon = default(EntityRef<PT_Pokemon>);
			this._PT_Gym = default(EntityRef<PT_Gym>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PokemonID", DbType="Int NOT NULL")]
		public int PokemonID
		{
			get
			{
				return this._PokemonID;
			}
			set
			{
				if ((this._PokemonID != value))
				{
					if (this._PT_Pokemon.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPokemonIDChanging(value);
					this.SendPropertyChanging();
					this._PokemonID = value;
					this.SendPropertyChanged("PokemonID");
					this.OnPokemonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GymID", DbType="Int NOT NULL")]
		public int GymID
		{
			get
			{
				return this._GymID;
			}
			set
			{
				if ((this._GymID != value))
				{
					if (this._PT_Gym.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGymIDChanging(value);
					this.SendPropertyChanging();
					this._GymID = value;
					this.SendPropertyChanged("GymID");
					this.OnGymIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PT_Pokemon_PT_GymHasPokemon", Storage="_PT_Pokemon", ThisKey="PokemonID", OtherKey="ID", IsForeignKey=true)]
		public PT_Pokemon PT_Pokemon
		{
			get
			{
				return this._PT_Pokemon.Entity;
			}
			set
			{
				PT_Pokemon previousValue = this._PT_Pokemon.Entity;
				if (((previousValue != value) 
							|| (this._PT_Pokemon.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PT_Pokemon.Entity = null;
						previousValue.PT_GymHasPokemons.Remove(this);
					}
					this._PT_Pokemon.Entity = value;
					if ((value != null))
					{
						value.PT_GymHasPokemons.Add(this);
						this._PokemonID = value.ID;
					}
					else
					{
						this._PokemonID = default(int);
					}
					this.SendPropertyChanged("PT_Pokemon");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PT_Gym_PT_GymHasPokemon", Storage="_PT_Gym", ThisKey="GymID", OtherKey="ID", IsForeignKey=true)]
		public PT_Gym PT_Gym
		{
			get
			{
				return this._PT_Gym.Entity;
			}
			set
			{
				PT_Gym previousValue = this._PT_Gym.Entity;
				if (((previousValue != value) 
							|| (this._PT_Gym.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PT_Gym.Entity = null;
						previousValue.PT_GymHasPokemons.Remove(this);
					}
					this._PT_Gym.Entity = value;
					if ((value != null))
					{
						value.PT_GymHasPokemons.Add(this);
						this._GymID = value.ID;
					}
					else
					{
						this._GymID = default(int);
					}
					this.SendPropertyChanged("PT_Gym");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PT_UserHasCandy")]
	public partial class PT_UserHasCandy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private int _PokemonID;
		
		private int _CandyAmount;
		
		private EntityRef<PT_Pokemon> _PT_Pokemon;
		
		private EntityRef<PT_User> _PT_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnPokemonIDChanging(int value);
    partial void OnPokemonIDChanged();
    partial void OnCandyAmountChanging(int value);
    partial void OnCandyAmountChanged();
    #endregion
		
		public PT_UserHasCandy()
		{
			this._PT_Pokemon = default(EntityRef<PT_Pokemon>);
			this._PT_User = default(EntityRef<PT_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._PT_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PokemonID", DbType="Int NOT NULL")]
		public int PokemonID
		{
			get
			{
				return this._PokemonID;
			}
			set
			{
				if ((this._PokemonID != value))
				{
					if (this._PT_Pokemon.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPokemonIDChanging(value);
					this.SendPropertyChanging();
					this._PokemonID = value;
					this.SendPropertyChanged("PokemonID");
					this.OnPokemonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CandyAmount", DbType="Int NOT NULL")]
		public int CandyAmount
		{
			get
			{
				return this._CandyAmount;
			}
			set
			{
				if ((this._CandyAmount != value))
				{
					this.OnCandyAmountChanging(value);
					this.SendPropertyChanging();
					this._CandyAmount = value;
					this.SendPropertyChanged("CandyAmount");
					this.OnCandyAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PT_Pokemon_PT_UserHasCandy", Storage="_PT_Pokemon", ThisKey="PokemonID", OtherKey="ID", IsForeignKey=true)]
		public PT_Pokemon PT_Pokemon
		{
			get
			{
				return this._PT_Pokemon.Entity;
			}
			set
			{
				PT_Pokemon previousValue = this._PT_Pokemon.Entity;
				if (((previousValue != value) 
							|| (this._PT_Pokemon.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PT_Pokemon.Entity = null;
						previousValue.PT_UserHasCandies.Remove(this);
					}
					this._PT_Pokemon.Entity = value;
					if ((value != null))
					{
						value.PT_UserHasCandies.Add(this);
						this._PokemonID = value.ID;
					}
					else
					{
						this._PokemonID = default(int);
					}
					this.SendPropertyChanged("PT_Pokemon");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PT_User_PT_UserHasCandy", Storage="_PT_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public PT_User PT_User
		{
			get
			{
				return this._PT_User.Entity;
			}
			set
			{
				PT_User previousValue = this._PT_User.Entity;
				if (((previousValue != value) 
							|| (this._PT_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PT_User.Entity = null;
						previousValue.PT_UserHasCandies.Remove(this);
					}
					this._PT_User.Entity = value;
					if ((value != null))
					{
						value.PT_UserHasCandies.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("PT_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PT_UserHasPokemon")]
	public partial class PT_UserHasPokemon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private int _PokemonID;
		
		private int _CP;
		
		private EntitySet<PT_UserPokemonHasAttack> _PT_UserPokemonHasAttacks;
		
		private EntityRef<PT_Pokemon> _PT_Pokemon;
		
		private EntityRef<PT_User> _PT_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnPokemonIDChanging(int value);
    partial void OnPokemonIDChanged();
    partial void OnCPChanging(int value);
    partial void OnCPChanged();
    #endregion
		
		public PT_UserHasPokemon()
		{
			this._PT_UserPokemonHasAttacks = new EntitySet<PT_UserPokemonHasAttack>(new Action<PT_UserPokemonHasAttack>(this.attach_PT_UserPokemonHasAttacks), new Action<PT_UserPokemonHasAttack>(this.detach_PT_UserPokemonHasAttacks));
			this._PT_Pokemon = default(EntityRef<PT_Pokemon>);
			this._PT_User = default(EntityRef<PT_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._PT_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PokemonID", DbType="Int NOT NULL")]
		public int PokemonID
		{
			get
			{
				return this._PokemonID;
			}
			set
			{
				if ((this._PokemonID != value))
				{
					if (this._PT_Pokemon.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPokemonIDChanging(value);
					this.SendPropertyChanging();
					this._PokemonID = value;
					this.SendPropertyChanged("PokemonID");
					this.OnPokemonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CP", DbType="Int NOT NULL")]
		public int CP
		{
			get
			{
				return this._CP;
			}
			set
			{
				if ((this._CP != value))
				{
					this.OnCPChanging(value);
					this.SendPropertyChanging();
					this._CP = value;
					this.SendPropertyChanged("CP");
					this.OnCPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PT_UserHasPokemon_PT_UserPokemonHasAttack", Storage="_PT_UserPokemonHasAttacks", ThisKey="ID", OtherKey="UserPokemonID")]
		public EntitySet<PT_UserPokemonHasAttack> PT_UserPokemonHasAttacks
		{
			get
			{
				return this._PT_UserPokemonHasAttacks;
			}
			set
			{
				this._PT_UserPokemonHasAttacks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PT_Pokemon_PT_UserHasPokemon", Storage="_PT_Pokemon", ThisKey="PokemonID", OtherKey="ID", IsForeignKey=true)]
		public PT_Pokemon PT_Pokemon
		{
			get
			{
				return this._PT_Pokemon.Entity;
			}
			set
			{
				PT_Pokemon previousValue = this._PT_Pokemon.Entity;
				if (((previousValue != value) 
							|| (this._PT_Pokemon.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PT_Pokemon.Entity = null;
						previousValue.PT_UserHasPokemons.Remove(this);
					}
					this._PT_Pokemon.Entity = value;
					if ((value != null))
					{
						value.PT_UserHasPokemons.Add(this);
						this._PokemonID = value.ID;
					}
					else
					{
						this._PokemonID = default(int);
					}
					this.SendPropertyChanged("PT_Pokemon");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PT_User_PT_UserHasPokemon", Storage="_PT_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public PT_User PT_User
		{
			get
			{
				return this._PT_User.Entity;
			}
			set
			{
				PT_User previousValue = this._PT_User.Entity;
				if (((previousValue != value) 
							|| (this._PT_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PT_User.Entity = null;
						previousValue.PT_UserHasPokemons.Remove(this);
					}
					this._PT_User.Entity = value;
					if ((value != null))
					{
						value.PT_UserHasPokemons.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("PT_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PT_UserPokemonHasAttacks(PT_UserPokemonHasAttack entity)
		{
			this.SendPropertyChanging();
			entity.PT_UserHasPokemon = this;
		}
		
		private void detach_PT_UserPokemonHasAttacks(PT_UserPokemonHasAttack entity)
		{
			this.SendPropertyChanging();
			entity.PT_UserHasPokemon = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PT_UserPokemonHasAttack")]
	public partial class PT_UserPokemonHasAttack : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserPokemonID;
		
		private int _AttackID;
		
		private EntityRef<PT_UserHasPokemon> _PT_UserHasPokemon;
		
		private EntityRef<PT_Attack> _PT_Attack;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserPokemonIDChanging(int value);
    partial void OnUserPokemonIDChanged();
    partial void OnAttackIDChanging(int value);
    partial void OnAttackIDChanged();
    #endregion
		
		public PT_UserPokemonHasAttack()
		{
			this._PT_UserHasPokemon = default(EntityRef<PT_UserHasPokemon>);
			this._PT_Attack = default(EntityRef<PT_Attack>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPokemonID", DbType="Int NOT NULL")]
		public int UserPokemonID
		{
			get
			{
				return this._UserPokemonID;
			}
			set
			{
				if ((this._UserPokemonID != value))
				{
					if (this._PT_UserHasPokemon.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserPokemonIDChanging(value);
					this.SendPropertyChanging();
					this._UserPokemonID = value;
					this.SendPropertyChanged("UserPokemonID");
					this.OnUserPokemonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttackID", DbType="Int NOT NULL")]
		public int AttackID
		{
			get
			{
				return this._AttackID;
			}
			set
			{
				if ((this._AttackID != value))
				{
					if (this._PT_Attack.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttackIDChanging(value);
					this.SendPropertyChanging();
					this._AttackID = value;
					this.SendPropertyChanged("AttackID");
					this.OnAttackIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PT_UserHasPokemon_PT_UserPokemonHasAttack", Storage="_PT_UserHasPokemon", ThisKey="UserPokemonID", OtherKey="ID", IsForeignKey=true)]
		public PT_UserHasPokemon PT_UserHasPokemon
		{
			get
			{
				return this._PT_UserHasPokemon.Entity;
			}
			set
			{
				PT_UserHasPokemon previousValue = this._PT_UserHasPokemon.Entity;
				if (((previousValue != value) 
							|| (this._PT_UserHasPokemon.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PT_UserHasPokemon.Entity = null;
						previousValue.PT_UserPokemonHasAttacks.Remove(this);
					}
					this._PT_UserHasPokemon.Entity = value;
					if ((value != null))
					{
						value.PT_UserPokemonHasAttacks.Add(this);
						this._UserPokemonID = value.ID;
					}
					else
					{
						this._UserPokemonID = default(int);
					}
					this.SendPropertyChanged("PT_UserHasPokemon");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PT_Attack_PT_UserPokemonHasAttack", Storage="_PT_Attack", ThisKey="AttackID", OtherKey="ID", IsForeignKey=true)]
		public PT_Attack PT_Attack
		{
			get
			{
				return this._PT_Attack.Entity;
			}
			set
			{
				PT_Attack previousValue = this._PT_Attack.Entity;
				if (((previousValue != value) 
							|| (this._PT_Attack.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PT_Attack.Entity = null;
						previousValue.PT_UserPokemonHasAttacks.Remove(this);
					}
					this._PT_Attack.Entity = value;
					if ((value != null))
					{
						value.PT_UserPokemonHasAttacks.Add(this);
						this._AttackID = value.ID;
					}
					else
					{
						this._AttackID = default(int);
					}
					this.SendPropertyChanged("PT_Attack");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PT_UserFavoriteGym")]
	public partial class PT_UserFavoriteGym : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private int _GymID;
		
		private EntityRef<PT_Gym> _PT_Gym;
		
		private EntityRef<PT_User> _PT_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnGymIDChanging(int value);
    partial void OnGymIDChanged();
    #endregion
		
		public PT_UserFavoriteGym()
		{
			this._PT_Gym = default(EntityRef<PT_Gym>);
			this._PT_User = default(EntityRef<PT_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._PT_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GymID", DbType="Int NOT NULL")]
		public int GymID
		{
			get
			{
				return this._GymID;
			}
			set
			{
				if ((this._GymID != value))
				{
					if (this._PT_Gym.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGymIDChanging(value);
					this.SendPropertyChanging();
					this._GymID = value;
					this.SendPropertyChanged("GymID");
					this.OnGymIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PT_Gym_PT_UserFavoriteGym", Storage="_PT_Gym", ThisKey="GymID", OtherKey="ID", IsForeignKey=true)]
		public PT_Gym PT_Gym
		{
			get
			{
				return this._PT_Gym.Entity;
			}
			set
			{
				PT_Gym previousValue = this._PT_Gym.Entity;
				if (((previousValue != value) 
							|| (this._PT_Gym.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PT_Gym.Entity = null;
						previousValue.PT_UserFavoriteGyms.Remove(this);
					}
					this._PT_Gym.Entity = value;
					if ((value != null))
					{
						value.PT_UserFavoriteGyms.Add(this);
						this._GymID = value.ID;
					}
					else
					{
						this._GymID = default(int);
					}
					this.SendPropertyChanged("PT_Gym");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PT_User_PT_UserFavoriteGym", Storage="_PT_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public PT_User PT_User
		{
			get
			{
				return this._PT_User.Entity;
			}
			set
			{
				PT_User previousValue = this._PT_User.Entity;
				if (((previousValue != value) 
							|| (this._PT_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PT_User.Entity = null;
						previousValue.PT_UserFavoriteGyms.Remove(this);
					}
					this._PT_User.Entity = value;
					if ((value != null))
					{
						value.PT_UserFavoriteGyms.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("PT_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PT_Pokemon")]
	public partial class PT_Pokemon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _ImagePath;
		
		private EntitySet<PT_PokemonHasAttack> _PT_PokemonHasAttacks;
		
		private EntitySet<PT_PokemonHasType> _PT_PokemonHasTypes;
		
		private EntitySet<PT_GymHasPokemon> _PT_GymHasPokemons;
		
		private EntitySet<PT_UserHasCandy> _PT_UserHasCandies;
		
		private EntitySet<PT_UserHasPokemon> _PT_UserHasPokemons;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnImagePathChanging(string value);
    partial void OnImagePathChanged();
    #endregion
		
		public PT_Pokemon()
		{
			this._PT_PokemonHasAttacks = new EntitySet<PT_PokemonHasAttack>(new Action<PT_PokemonHasAttack>(this.attach_PT_PokemonHasAttacks), new Action<PT_PokemonHasAttack>(this.detach_PT_PokemonHasAttacks));
			this._PT_PokemonHasTypes = new EntitySet<PT_PokemonHasType>(new Action<PT_PokemonHasType>(this.attach_PT_PokemonHasTypes), new Action<PT_PokemonHasType>(this.detach_PT_PokemonHasTypes));
			this._PT_GymHasPokemons = new EntitySet<PT_GymHasPokemon>(new Action<PT_GymHasPokemon>(this.attach_PT_GymHasPokemons), new Action<PT_GymHasPokemon>(this.detach_PT_GymHasPokemons));
			this._PT_UserHasCandies = new EntitySet<PT_UserHasCandy>(new Action<PT_UserHasCandy>(this.attach_PT_UserHasCandies), new Action<PT_UserHasCandy>(this.detach_PT_UserHasCandies));
			this._PT_UserHasPokemons = new EntitySet<PT_UserHasPokemon>(new Action<PT_UserHasPokemon>(this.attach_PT_UserHasPokemons), new Action<PT_UserHasPokemon>(this.detach_PT_UserHasPokemons));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImagePath", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ImagePath
		{
			get
			{
				return this._ImagePath;
			}
			set
			{
				if ((this._ImagePath != value))
				{
					this.OnImagePathChanging(value);
					this.SendPropertyChanging();
					this._ImagePath = value;
					this.SendPropertyChanged("ImagePath");
					this.OnImagePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PT_Pokemon_PT_PokemonHasAttack", Storage="_PT_PokemonHasAttacks", ThisKey="ID", OtherKey="PokemonID")]
		public EntitySet<PT_PokemonHasAttack> PT_PokemonHasAttacks
		{
			get
			{
				return this._PT_PokemonHasAttacks;
			}
			set
			{
				this._PT_PokemonHasAttacks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PT_Pokemon_PT_PokemonHasType", Storage="_PT_PokemonHasTypes", ThisKey="ID", OtherKey="PokemonID")]
		public EntitySet<PT_PokemonHasType> PT_PokemonHasTypes
		{
			get
			{
				return this._PT_PokemonHasTypes;
			}
			set
			{
				this._PT_PokemonHasTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PT_Pokemon_PT_GymHasPokemon", Storage="_PT_GymHasPokemons", ThisKey="ID", OtherKey="PokemonID")]
		public EntitySet<PT_GymHasPokemon> PT_GymHasPokemons
		{
			get
			{
				return this._PT_GymHasPokemons;
			}
			set
			{
				this._PT_GymHasPokemons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PT_Pokemon_PT_UserHasCandy", Storage="_PT_UserHasCandies", ThisKey="ID", OtherKey="PokemonID")]
		public EntitySet<PT_UserHasCandy> PT_UserHasCandies
		{
			get
			{
				return this._PT_UserHasCandies;
			}
			set
			{
				this._PT_UserHasCandies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PT_Pokemon_PT_UserHasPokemon", Storage="_PT_UserHasPokemons", ThisKey="ID", OtherKey="PokemonID")]
		public EntitySet<PT_UserHasPokemon> PT_UserHasPokemons
		{
			get
			{
				return this._PT_UserHasPokemons;
			}
			set
			{
				this._PT_UserHasPokemons.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PT_PokemonHasAttacks(PT_PokemonHasAttack entity)
		{
			this.SendPropertyChanging();
			entity.PT_Pokemon = this;
		}
		
		private void detach_PT_PokemonHasAttacks(PT_PokemonHasAttack entity)
		{
			this.SendPropertyChanging();
			entity.PT_Pokemon = null;
		}
		
		private void attach_PT_PokemonHasTypes(PT_PokemonHasType entity)
		{
			this.SendPropertyChanging();
			entity.PT_Pokemon = this;
		}
		
		private void detach_PT_PokemonHasTypes(PT_PokemonHasType entity)
		{
			this.SendPropertyChanging();
			entity.PT_Pokemon = null;
		}
		
		private void attach_PT_GymHasPokemons(PT_GymHasPokemon entity)
		{
			this.SendPropertyChanging();
			entity.PT_Pokemon = this;
		}
		
		private void detach_PT_GymHasPokemons(PT_GymHasPokemon entity)
		{
			this.SendPropertyChanging();
			entity.PT_Pokemon = null;
		}
		
		private void attach_PT_UserHasCandies(PT_UserHasCandy entity)
		{
			this.SendPropertyChanging();
			entity.PT_Pokemon = this;
		}
		
		private void detach_PT_UserHasCandies(PT_UserHasCandy entity)
		{
			this.SendPropertyChanging();
			entity.PT_Pokemon = null;
		}
		
		private void attach_PT_UserHasPokemons(PT_UserHasPokemon entity)
		{
			this.SendPropertyChanging();
			entity.PT_Pokemon = this;
		}
		
		private void detach_PT_UserHasPokemons(PT_UserHasPokemon entity)
		{
			this.SendPropertyChanging();
			entity.PT_Pokemon = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PT_Attacks")]
	public partial class PT_Attack : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _TypeID;
		
		private double _DPS;
		
		private int _Damage;
		
		private double _Seconds;
		
		private int _Energy;
		
		private bool _IsChargeMove;
		
		private EntitySet<PT_PokemonHasAttack> _PT_PokemonHasAttacks;
		
		private EntitySet<PT_UserPokemonHasAttack> _PT_UserPokemonHasAttacks;
		
		private EntityRef<PT_Type> _PT_Type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnDPSChanging(double value);
    partial void OnDPSChanged();
    partial void OnDamageChanging(int value);
    partial void OnDamageChanged();
    partial void OnSecondsChanging(double value);
    partial void OnSecondsChanged();
    partial void OnEnergyChanging(int value);
    partial void OnEnergyChanged();
    partial void OnIsChargeMoveChanging(bool value);
    partial void OnIsChargeMoveChanged();
    #endregion
		
		public PT_Attack()
		{
			this._PT_PokemonHasAttacks = new EntitySet<PT_PokemonHasAttack>(new Action<PT_PokemonHasAttack>(this.attach_PT_PokemonHasAttacks), new Action<PT_PokemonHasAttack>(this.detach_PT_PokemonHasAttacks));
			this._PT_UserPokemonHasAttacks = new EntitySet<PT_UserPokemonHasAttack>(new Action<PT_UserPokemonHasAttack>(this.attach_PT_UserPokemonHasAttacks), new Action<PT_UserPokemonHasAttack>(this.detach_PT_UserPokemonHasAttacks));
			this._PT_Type = default(EntityRef<PT_Type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int NOT NULL")]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._PT_Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DPS", DbType="Float NOT NULL")]
		public double DPS
		{
			get
			{
				return this._DPS;
			}
			set
			{
				if ((this._DPS != value))
				{
					this.OnDPSChanging(value);
					this.SendPropertyChanging();
					this._DPS = value;
					this.SendPropertyChanged("DPS");
					this.OnDPSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Damage", DbType="Int NOT NULL")]
		public int Damage
		{
			get
			{
				return this._Damage;
			}
			set
			{
				if ((this._Damage != value))
				{
					this.OnDamageChanging(value);
					this.SendPropertyChanging();
					this._Damage = value;
					this.SendPropertyChanged("Damage");
					this.OnDamageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Seconds", DbType="Float NOT NULL")]
		public double Seconds
		{
			get
			{
				return this._Seconds;
			}
			set
			{
				if ((this._Seconds != value))
				{
					this.OnSecondsChanging(value);
					this.SendPropertyChanging();
					this._Seconds = value;
					this.SendPropertyChanged("Seconds");
					this.OnSecondsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Energy", DbType="Int NOT NULL")]
		public int Energy
		{
			get
			{
				return this._Energy;
			}
			set
			{
				if ((this._Energy != value))
				{
					this.OnEnergyChanging(value);
					this.SendPropertyChanging();
					this._Energy = value;
					this.SendPropertyChanged("Energy");
					this.OnEnergyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsChargeMove", DbType="Bit NOT NULL")]
		public bool IsChargeMove
		{
			get
			{
				return this._IsChargeMove;
			}
			set
			{
				if ((this._IsChargeMove != value))
				{
					this.OnIsChargeMoveChanging(value);
					this.SendPropertyChanging();
					this._IsChargeMove = value;
					this.SendPropertyChanged("IsChargeMove");
					this.OnIsChargeMoveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PT_Attack_PT_PokemonHasAttack", Storage="_PT_PokemonHasAttacks", ThisKey="ID", OtherKey="AttackID")]
		public EntitySet<PT_PokemonHasAttack> PT_PokemonHasAttacks
		{
			get
			{
				return this._PT_PokemonHasAttacks;
			}
			set
			{
				this._PT_PokemonHasAttacks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PT_Attack_PT_UserPokemonHasAttack", Storage="_PT_UserPokemonHasAttacks", ThisKey="ID", OtherKey="AttackID")]
		public EntitySet<PT_UserPokemonHasAttack> PT_UserPokemonHasAttacks
		{
			get
			{
				return this._PT_UserPokemonHasAttacks;
			}
			set
			{
				this._PT_UserPokemonHasAttacks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PT_Type_PT_Attack", Storage="_PT_Type", ThisKey="TypeID", OtherKey="ID", IsForeignKey=true)]
		public PT_Type PT_Type
		{
			get
			{
				return this._PT_Type.Entity;
			}
			set
			{
				PT_Type previousValue = this._PT_Type.Entity;
				if (((previousValue != value) 
							|| (this._PT_Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PT_Type.Entity = null;
						previousValue.PT_Attacks.Remove(this);
					}
					this._PT_Type.Entity = value;
					if ((value != null))
					{
						value.PT_Attacks.Add(this);
						this._TypeID = value.ID;
					}
					else
					{
						this._TypeID = default(int);
					}
					this.SendPropertyChanged("PT_Type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PT_PokemonHasAttacks(PT_PokemonHasAttack entity)
		{
			this.SendPropertyChanging();
			entity.PT_Attack = this;
		}
		
		private void detach_PT_PokemonHasAttacks(PT_PokemonHasAttack entity)
		{
			this.SendPropertyChanging();
			entity.PT_Attack = null;
		}
		
		private void attach_PT_UserPokemonHasAttacks(PT_UserPokemonHasAttack entity)
		{
			this.SendPropertyChanging();
			entity.PT_Attack = this;
		}
		
		private void detach_PT_UserPokemonHasAttacks(PT_UserPokemonHasAttack entity)
		{
			this.SendPropertyChanging();
			entity.PT_Attack = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PT_Gym")]
	public partial class PT_Gym : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _TeamID;
		
		private int _GymLevel;
		
		private string _Location;
		
		private EntitySet<PT_GymHasPokemon> _PT_GymHasPokemons;
		
		private EntitySet<PT_UserFavoriteGym> _PT_UserFavoriteGyms;
		
		private EntityRef<PT_Team> _PT_Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    partial void OnGymLevelChanging(int value);
    partial void OnGymLevelChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    #endregion
		
		public PT_Gym()
		{
			this._PT_GymHasPokemons = new EntitySet<PT_GymHasPokemon>(new Action<PT_GymHasPokemon>(this.attach_PT_GymHasPokemons), new Action<PT_GymHasPokemon>(this.detach_PT_GymHasPokemons));
			this._PT_UserFavoriteGyms = new EntitySet<PT_UserFavoriteGym>(new Action<PT_UserFavoriteGym>(this.attach_PT_UserFavoriteGyms), new Action<PT_UserFavoriteGym>(this.detach_PT_UserFavoriteGyms));
			this._PT_Team = default(EntityRef<PT_Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int NOT NULL")]
		public int TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._PT_Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GymLevel", DbType="Int NOT NULL")]
		public int GymLevel
		{
			get
			{
				return this._GymLevel;
			}
			set
			{
				if ((this._GymLevel != value))
				{
					this.OnGymLevelChanging(value);
					this.SendPropertyChanging();
					this._GymLevel = value;
					this.SendPropertyChanged("GymLevel");
					this.OnGymLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PT_Gym_PT_GymHasPokemon", Storage="_PT_GymHasPokemons", ThisKey="ID", OtherKey="GymID")]
		public EntitySet<PT_GymHasPokemon> PT_GymHasPokemons
		{
			get
			{
				return this._PT_GymHasPokemons;
			}
			set
			{
				this._PT_GymHasPokemons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PT_Gym_PT_UserFavoriteGym", Storage="_PT_UserFavoriteGyms", ThisKey="ID", OtherKey="GymID")]
		public EntitySet<PT_UserFavoriteGym> PT_UserFavoriteGyms
		{
			get
			{
				return this._PT_UserFavoriteGyms;
			}
			set
			{
				this._PT_UserFavoriteGyms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PT_Team_PT_Gym", Storage="_PT_Team", ThisKey="TeamID", OtherKey="ID", IsForeignKey=true)]
		public PT_Team PT_Team
		{
			get
			{
				return this._PT_Team.Entity;
			}
			set
			{
				PT_Team previousValue = this._PT_Team.Entity;
				if (((previousValue != value) 
							|| (this._PT_Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PT_Team.Entity = null;
						previousValue.PT_Gyms.Remove(this);
					}
					this._PT_Team.Entity = value;
					if ((value != null))
					{
						value.PT_Gyms.Add(this);
						this._TeamID = value.ID;
					}
					else
					{
						this._TeamID = default(int);
					}
					this.SendPropertyChanged("PT_Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PT_GymHasPokemons(PT_GymHasPokemon entity)
		{
			this.SendPropertyChanging();
			entity.PT_Gym = this;
		}
		
		private void detach_PT_GymHasPokemons(PT_GymHasPokemon entity)
		{
			this.SendPropertyChanging();
			entity.PT_Gym = null;
		}
		
		private void attach_PT_UserFavoriteGyms(PT_UserFavoriteGym entity)
		{
			this.SendPropertyChanging();
			entity.PT_Gym = this;
		}
		
		private void detach_PT_UserFavoriteGyms(PT_UserFavoriteGym entity)
		{
			this.SendPropertyChanging();
			entity.PT_Gym = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PT_Team")]
	public partial class PT_Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<PT_Gym> _PT_Gyms;
		
		private EntitySet<PT_User> _PT_Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public PT_Team()
		{
			this._PT_Gyms = new EntitySet<PT_Gym>(new Action<PT_Gym>(this.attach_PT_Gyms), new Action<PT_Gym>(this.detach_PT_Gyms));
			this._PT_Users = new EntitySet<PT_User>(new Action<PT_User>(this.attach_PT_Users), new Action<PT_User>(this.detach_PT_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PT_Team_PT_Gym", Storage="_PT_Gyms", ThisKey="ID", OtherKey="TeamID")]
		public EntitySet<PT_Gym> PT_Gyms
		{
			get
			{
				return this._PT_Gyms;
			}
			set
			{
				this._PT_Gyms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PT_Team_PT_User", Storage="_PT_Users", ThisKey="ID", OtherKey="TeamID")]
		public EntitySet<PT_User> PT_Users
		{
			get
			{
				return this._PT_Users;
			}
			set
			{
				this._PT_Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PT_Gyms(PT_Gym entity)
		{
			this.SendPropertyChanging();
			entity.PT_Team = this;
		}
		
		private void detach_PT_Gyms(PT_Gym entity)
		{
			this.SendPropertyChanging();
			entity.PT_Team = null;
		}
		
		private void attach_PT_Users(PT_User entity)
		{
			this.SendPropertyChanging();
			entity.PT_Team = this;
		}
		
		private void detach_PT_Users(PT_User entity)
		{
			this.SendPropertyChanging();
			entity.PT_Team = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PT_User")]
	public partial class PT_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Username;
		
		private string _Email;
		
		private string _Password;
		
		private int _TeamID;
		
		private EntitySet<PT_UserHasCandy> _PT_UserHasCandies;
		
		private EntitySet<PT_UserHasPokemon> _PT_UserHasPokemons;
		
		private EntitySet<PT_UserFavoriteGym> _PT_UserFavoriteGyms;
		
		private EntityRef<PT_Team> _PT_Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    #endregion
		
		public PT_User()
		{
			this._PT_UserHasCandies = new EntitySet<PT_UserHasCandy>(new Action<PT_UserHasCandy>(this.attach_PT_UserHasCandies), new Action<PT_UserHasCandy>(this.detach_PT_UserHasCandies));
			this._PT_UserHasPokemons = new EntitySet<PT_UserHasPokemon>(new Action<PT_UserHasPokemon>(this.attach_PT_UserHasPokemons), new Action<PT_UserHasPokemon>(this.detach_PT_UserHasPokemons));
			this._PT_UserFavoriteGyms = new EntitySet<PT_UserFavoriteGym>(new Action<PT_UserFavoriteGym>(this.attach_PT_UserFavoriteGyms), new Action<PT_UserFavoriteGym>(this.detach_PT_UserFavoriteGyms));
			this._PT_Team = default(EntityRef<PT_Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int NOT NULL")]
		public int TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._PT_Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PT_User_PT_UserHasCandy", Storage="_PT_UserHasCandies", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<PT_UserHasCandy> PT_UserHasCandies
		{
			get
			{
				return this._PT_UserHasCandies;
			}
			set
			{
				this._PT_UserHasCandies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PT_User_PT_UserHasPokemon", Storage="_PT_UserHasPokemons", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<PT_UserHasPokemon> PT_UserHasPokemons
		{
			get
			{
				return this._PT_UserHasPokemons;
			}
			set
			{
				this._PT_UserHasPokemons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PT_User_PT_UserFavoriteGym", Storage="_PT_UserFavoriteGyms", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<PT_UserFavoriteGym> PT_UserFavoriteGyms
		{
			get
			{
				return this._PT_UserFavoriteGyms;
			}
			set
			{
				this._PT_UserFavoriteGyms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PT_Team_PT_User", Storage="_PT_Team", ThisKey="TeamID", OtherKey="ID", IsForeignKey=true)]
		public PT_Team PT_Team
		{
			get
			{
				return this._PT_Team.Entity;
			}
			set
			{
				PT_Team previousValue = this._PT_Team.Entity;
				if (((previousValue != value) 
							|| (this._PT_Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PT_Team.Entity = null;
						previousValue.PT_Users.Remove(this);
					}
					this._PT_Team.Entity = value;
					if ((value != null))
					{
						value.PT_Users.Add(this);
						this._TeamID = value.ID;
					}
					else
					{
						this._TeamID = default(int);
					}
					this.SendPropertyChanged("PT_Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PT_UserHasCandies(PT_UserHasCandy entity)
		{
			this.SendPropertyChanging();
			entity.PT_User = this;
		}
		
		private void detach_PT_UserHasCandies(PT_UserHasCandy entity)
		{
			this.SendPropertyChanging();
			entity.PT_User = null;
		}
		
		private void attach_PT_UserHasPokemons(PT_UserHasPokemon entity)
		{
			this.SendPropertyChanging();
			entity.PT_User = this;
		}
		
		private void detach_PT_UserHasPokemons(PT_UserHasPokemon entity)
		{
			this.SendPropertyChanging();
			entity.PT_User = null;
		}
		
		private void attach_PT_UserFavoriteGyms(PT_UserFavoriteGym entity)
		{
			this.SendPropertyChanging();
			entity.PT_User = this;
		}
		
		private void detach_PT_UserFavoriteGyms(PT_UserFavoriteGym entity)
		{
			this.SendPropertyChanging();
			entity.PT_User = null;
		}
	}
}
#pragma warning restore 1591
